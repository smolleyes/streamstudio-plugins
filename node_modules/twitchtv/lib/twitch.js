"use strict"

/**
 * Module Dependencies
 */
var request = require('request')
  , https = require('https')
  , utils = require('./utils')
  , oauth = require('oauth');

function TwitchTv(options) {
	if (!(this instanceof TwitchTv)) return new TwitchTv(options);

	// Default Client Options
	var defaults = {
		apiKey: null,

		consumerKey: null,
		consumerSecret: null,
		accessTokenKey: null,
		accessTokenSecret: null,

		headers: {
			'Accept': 'application/vnd.twitchtv.v2+json',
			'Connection': 'close',
			'User-Agent': 'node-TwitchTv/',
			'Client-ID': 'etzhxu868r53vbzh76wwd0o3fogdwn', // TODO: fill this out
		},

		restBase: 	'https://api.twitch.tv/kraken',
		gamesUrl: 	'/games/top', 		// Does not require key
		ingestsUrl: '/ingests', 		// Does not require key
		teamsUrl: 	'/teams', 			// Does not require key
		channelUrl: '/channel', 		// Requires key
		userUrl: 	'/user', 			// Requires key
		streamsUrl: '/streams',			// Does not require key
		searchUrl: 	'/search'			// ?
	};

	this.options = utils.merge(defaults, options);
}

/**
 * Issues an HTTPS Get request.
 *
 * @param {String} 		url 		String of the URL to issue the request to.
 * @param {Object} 		params 		Object containing query string parameters to issue in the Get request.
 * @param {Function}	callback 	Callback function that will be called when the processing is done.
 */
TwitchTv.prototype.get = function(url, params, callback) {
	if (typeof params === 'function') {
		callback = params;
		params = null;
	}

	if ( typeof callback !== 'function' ) {
		throw "ERROR: Invalid callback function.";
		return this;
	}

	if (url.charAt(0) == '/')
		url = this.options.restBase + url;

    // Holds data from HTTP response body
    var body = []
      , req = https.get(url, function(res){

        res.on('data', function (chunk){
            body += chunk;
        });

        res.on('end',function(){
            callback(JSON.parse(body));
        });
    })

    req.on('error',function(e){
	   console.log( e.stack );
	});

    return this;
};

/**
 * Returns a list of games objects sorted by number of current viewers on Twitch, most popular first.
 *
 * API Ref: https://github.com/justintv/Twitch-API/blob/master/v2_resources/games.md#get-gamestop
 *
 * @param {Object} params
 * @param {Function} callback
 */
TwitchTv.prototype.getGames = function(params, callback) {
	var url = this.options.restBase + this.options.gamesUrl;
	this.get(url, params, function(data) {
	  callback(data);
	});
	return this;
};

/**
 * Returns a list of games objects sorted by number of current viewers on Twitch, most popular first.
 *
 * API Ref: https://github.com/justintv/Twitch-API/blob/master/v2_resources/games.md#get-gamestop
 *
 * @param {Object} params
 * @param {Function} callback
 */
TwitchTv.prototype.getTeams = function(params, callback) {
	var url = this.options.restBase + this.options.teamsUrl;
	this.get(url, params, function(data) {
	  callback(data);
	});
	return this;
};

/**
 * @param {Object} params
 * @param {Function} callback
 */
TwitchTv.prototype.getIngests = function(params, callback) {
	var url = this.options.restBase + this.options.ingestsUrl;
	this.get(url, params, function(data) {
	  callback(data);
	});
	return this;
};

/**
 * @param {Object} params
 * @param {Function} callback
 */
TwitchTv.prototype.getStreams = function(params, callback) {
	var url = this.options.restBase + this.options.streamsUrl;
	this.get(url, params, function(data) {
	  callback(data);
	});
	return this;
};

/**
 * TODO: Requires auth
 */
TwitchTv.prototype.getChannel = function(params, callback) {

};

/**
 * TODO: Requires auth
 */
TwitchTv.prototype.getUser = function(params, callback) {

};

/**
 * TODO:
 */
TwitchTv.prototype.search = function(params, callback) {

};

module.exports = TwitchTv;
